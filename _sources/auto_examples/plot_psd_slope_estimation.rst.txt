
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_psd_slope_estimation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_psd_slope_estimation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_psd_slope_estimation.py:


===================================================================
Estimation of the slope and intercept of the Power Spectral Density
===================================================================

This example aims at showing how the utility function `power_spectrum` and 
the feature function :func:`mne_features.univariate.compute_spect_slope` can 
be used to estimate the slope and the intercept of the Power Spectral 
Density (PSD, computed - by default - using Welch method).

The code for this example is based on the method proposed in:

Jean-Baptiste SCHIRATTI, Jean-Eudes LE DOUGET, Michel LE VAN QUYEN,
Slim ESSID, Alexandre GRAMFORT,
"An ensemble learning approach to detect epileptic seizures from long
intracranial EEG recordings"
Proc. IEEE ICASSP Conf. 2018

.. note::

    This example is for illustration purposes, as other methods
    may lead to more robust/reliable estimation of the slope and intercept 
    of the PSD.

.. GENERATED FROM PYTHON SOURCE LINES 26-41

.. code-block:: default


    # Author: Jean-Baptiste Schiratti <jean.baptiste.schiratti@gmail.com>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    import matplotlib.pyplot as plt
    import mne
    import numpy as np
    from mne.datasets import sample

    from mne_features.univariate import compute_spect_slope
    from mne_features.utils import power_spectrum

    print(__doc__)








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Let us import the data using MNE-Python and epoch it:

.. GENERATED FROM PYTHON SOURCE LINES 43-54

.. code-block:: default


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(.5, None, fir_design='firwin')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
            <td>December 03, 2002  19:01:10 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>146 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>204 Gradiometers, 102 Magnetometers, 9 Stimulus, 60 EEG, 1 EOG</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>MEG 2443, EEG 053</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>EOG 061</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>150.15 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.50 Hz</td>
        </tr>
        <tr>
            <th>Lowpass</th>
            <td>40.00 Hz</td>
        </tr>
            <tr>
                <th>Projections</th>
                <td>PCA-v1: off<br/>PCA-v2: off<br/>PCA-v3: off<br/>Average EEG reference: off</td>
            </tr>

        <tr>
            <th>Filenames</th>
            <td>sample_audvis_filt-0-40_raw.fif</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:04:37 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 55-58

Estimate the slope (and the intercept) of the PSD. We use here a single
MEG channel during the full recording to estimate the slope and the
intercept.

.. GENERATED FROM PYTHON SOURCE LINES 58-92

.. code-block:: default


    data, _ = raw[1, :2048]
    sfreq = raw.info['sfreq']

    # Compute the (one-sided) PSD using Welch method. The ``mask`` variable allows
    # to select only the part of the PSD which corresponds to frequencies between
    # 0.1Hz and 40Hz (the data used in this example is already low-pass filtered
    # at 40Hz).
    psd, freqs = power_spectrum(sfreq, data)
    mask = np.logical_and(1 <= freqs, freqs <= 40)
    psd, freqs = psd[0, mask], freqs[mask]

    # Estimate the slope (and the intercept) of the PSD. The function
    # :func:`compute_spect_slope` assumes that the PSD of the signal is of the
    # form: ``psd[f] = b / (f ** a)``. The coefficients a and b are respectively
    # called *slope* and *intercept* of the Power Spectral Density. The values of
    # the variables ``slope`` and ``intercept`` differ from the values returned
    # by ``compute_spect_slope`` because, in the feature function, the linear
    # regression fit is done in the log10-log10 scale.
    intercept, slope, _, _ = compute_spect_slope(sfreq, data, fmin=1., fmax=40.)
    print('The estimated slope is a = %1.2f and the estimated intercept is '
          'b = %1.3e' % (slope, intercept))

    # Plot the PSD together with the ``b + a * f`` straight line (estimated decay
    # of the PSD with frequency in the log10-log10 scale).
    plt.figure()
    plt.semilogx(freqs, np.log10(psd), '-b', lw=2, label='PSD')
    plt.semilogx(freqs, intercept + slope * np.log10(freqs),
                 '-r', lw=2, label='b + a * f')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('PSD (dB)')
    plt.xlim([1, 40])
    plt.legend(loc='lower left')
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_psd_slope_estimation_001.png
   :alt: plot psd slope estimation
   :srcset: /auto_examples/images/sphx_glr_plot_psd_slope_estimation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The estimated slope is a = -1.07 and the estimated intercept is b = -2.357e+01





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.839 seconds)


.. _sphx_glr_download_auto_examples_plot_psd_slope_estimation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_psd_slope_estimation.py <plot_psd_slope_estimation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_psd_slope_estimation.ipynb <plot_psd_slope_estimation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
