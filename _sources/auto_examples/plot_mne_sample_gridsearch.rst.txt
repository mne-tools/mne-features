
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mne_sample_gridsearch.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mne_sample_gridsearch.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mne_sample_gridsearch.py:


==========================================================================
Use scikit-learn GridSearchCV with FeatureExtractor for setting parameters
==========================================================================

The example shows how :class:`~sklearn.model_selection.GridSearchCV`
can be used for parameter tuning in a pipeline which sequentially
combines feature extraction (with
:class:`mne_features.feature_extraction.FeatureExtractor`),
data standardization (with :class:`~sklearn.preprocessing.StandardScaler`)
and classification (with :class:`~sklearn.linear_model.LogisticRegression`).

The code for this example is based on the method proposed in:

Jean-Baptiste SCHIRATTI, Jean-Eudes LE DOUGET, Michel LE VAN QUYEN,
Slim ESSID, Alexandre GRAMFORT,
"An ensemble learning approach to detect epileptic seizures from long
intracranial EEG recordings"
Proc. IEEE ICASSP Conf. 2018

.. note::

    This example is for illustration purposes, as other methods
    may lead to better performance on such a dataset (classification
    of auditory vs. visual stimuli).

.. GENERATED FROM PYTHON SOURCE LINES 28-47

.. code-block:: default


    # Author: Jean-Baptiste Schiratti <jean.baptiste.schiratti@gmail.com>
    #         Guillaume Corda <guillaume.corda@telecom-paristech.fr>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    import mne
    import numpy as np
    import pandas as pd
    from mne.datasets import sample
    from mne_features.feature_extraction import FeatureExtractor
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import StandardScaler
    from sklearn.model_selection import (GridSearchCV, cross_val_score,
                                         StratifiedKFold)
    from sklearn.pipeline import Pipeline

    print(__doc__)








.. GENERATED FROM PYTHON SOURCE LINES 48-49

Let us import the data using MNE-Python and epoch it:

.. GENERATED FROM PYTHON SOURCE LINES 49-70

.. code-block:: default


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(.5, None, fir_design='firwin')
    events = mne.read_events(event_fname)
    picks = mne.pick_types(raw.info, meg='grad', eeg=False)

    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks, proj=True,
                        baseline=None, preload=True)
    labels = epochs.events[:, -1]

    # get MEG and EEG data
    data = epochs.get_data()








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Prepare for the classification task:

.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: default


    pipe = Pipeline([('fe', FeatureExtractor(sfreq=raw.info['sfreq'],
                                             selected_funcs=['app_entropy',
                                                             'mean'])),
                     ('scaler', StandardScaler()),
                     ('clf', LogisticRegression(random_state=42, solver='lbfgs'))])
    skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)
    y = labels








.. GENERATED FROM PYTHON SOURCE LINES 82-84

Cross-validation accuracy score with default parameters (emb = 2, by default
for `compute_app_entropy`):

.. GENERATED FROM PYTHON SOURCE LINES 84-89

.. code-block:: default


    scores = cross_val_score(pipe, data, y, cv=skf)
    print('Cross-validation accuracy score (with default parameters) = %1.3f '
          '(+/- %1.5f)' % (np.mean(scores), np.std(scores)))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cross-validation accuracy score (with default parameters) = 0.862 (+/- 0.02027)




.. GENERATED FROM PYTHON SOURCE LINES 90-94

Optimization of features extraction optional parameters:
Here, only the embedding dimension parameter of
:func:`mne_features.univariate.compute_app_entropy` is optimized using
GridSearchCV.

.. GENERATED FROM PYTHON SOURCE LINES 94-106

.. code-block:: default


    params_grid = {'fe__app_entropy__emb': np.arange(2, 5)}

    cv = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)
    gs = GridSearchCV(estimator=pipe, param_grid=params_grid,
                      cv=cv, n_jobs=1,
                      return_train_score=True)
    gs.fit(data, y)

    # Best parameters obtained with GridSearchCV:
    print(gs.best_params_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'fe__app_entropy__emb': 3}




.. GENERATED FROM PYTHON SOURCE LINES 107-108

Scores with all parameter values:

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default

    scores = pd.DataFrame(gs.cv_results_)
    print(scores[['params', 'mean_test_score', 'mean_train_score']])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                            params  mean_test_score  mean_train_score
    0  {'fe__app_entropy__emb': 2}         0.827626               1.0
    1  {'fe__app_entropy__emb': 3}         0.903539               1.0
    2  {'fe__app_entropy__emb': 4}         0.876142               1.0




.. GENERATED FROM PYTHON SOURCE LINES 112-113

Cross-validation accuracy score with optimized parameters:

.. GENERATED FROM PYTHON SOURCE LINES 113-119

.. code-block:: default


    gs_best = gs.best_estimator_
    new_scores = cross_val_score(gs_best, data, y, cv=skf)

    print('Cross-validation accuracy score (with optimized parameters) = %1.3f '
          '(+/- %1.5f)' % (np.mean(new_scores), np.std(new_scores)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cross-validation accuracy score (with optimized parameters) = 0.938 (+/- 0.01632)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  41.450 seconds)


.. _sphx_glr_download_auto_examples_plot_mne_sample_gridsearch.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mne_sample_gridsearch.py <plot_mne_sample_gridsearch.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mne_sample_gridsearch.ipynb <plot_mne_sample_gridsearch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
